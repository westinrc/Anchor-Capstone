'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _cell = require('./cell');

var _cell2 = _interopRequireDefault(_cell);

var _selectionCell = require('./row-selection/selection-cell');

var _selectionCell2 = _interopRequireDefault(_selectionCell);

var _const = require('./const');

var _const2 = _interopRequireDefault(_const);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint react/prop-types: 0 */
/* eslint react/no-array-index-key: 0 */


var Row = function (_Component) {
  _inherits(Row, _Component);

  function Row(props) {
    _classCallCheck(this, Row);

    var _this = _possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).call(this, props));

    _this.clickNum = 0;
    _this.handleRowClick = _this.handleRowClick.bind(_this);
    _this.handleSimpleRowClick = _this.handleSimpleRowClick.bind(_this);
    return _this;
  }

  _createClass(Row, [{
    key: 'handleRowClick',
    value: function handleRowClick(e) {
      var _this2 = this;

      var _props = this.props,
          row = _props.row,
          selected = _props.selected,
          keyField = _props.keyField,
          selectable = _props.selectable,
          rowIndex = _props.rowIndex,
          _props$selectRow = _props.selectRow,
          onRowSelect = _props$selectRow.onRowSelect,
          clickToEdit = _props$selectRow.clickToEdit,
          _props$cellEdit = _props.cellEdit,
          mode = _props$cellEdit.mode,
          DBCLICK_TO_CELL_EDIT = _props$cellEdit.DBCLICK_TO_CELL_EDIT,
          DELAY_FOR_DBCLICK = _props$cellEdit.DELAY_FOR_DBCLICK,
          attrs = _props.attrs;


      var clickFn = function clickFn() {
        if (attrs.onClick) {
          attrs.onClick(e, row, rowIndex);
        }
        if (selectable) {
          var key = _utils2.default.get(row, keyField);
          onRowSelect(key, !selected, rowIndex);
        }
      };

      if (mode === DBCLICK_TO_CELL_EDIT && clickToEdit) {
        this.clickNum += 1;
        _utils2.default.debounce(function () {
          if (_this2.clickNum === 1) {
            clickFn();
          }
          _this2.clickNum = 0;
        }, DELAY_FOR_DBCLICK)();
      } else {
        clickFn();
      }
    }
  }, {
    key: 'handleSimpleRowClick',
    value: function handleSimpleRowClick(e) {
      var _props2 = this.props,
          row = _props2.row,
          rowIndex = _props2.rowIndex,
          attrs = _props2.attrs;


      attrs.onClick(e, row, rowIndex);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          row = _props3.row,
          columns = _props3.columns,
          keyField = _props3.keyField,
          rowIndex = _props3.rowIndex,
          className = _props3.className,
          style = _props3.style,
          attrs = _props3.attrs,
          cellEdit = _props3.cellEdit,
          selected = _props3.selected,
          selectRow = _props3.selectRow,
          selectable = _props3.selectable,
          editableRow = _props3.editable;

      var mode = cellEdit.mode,
          onStart = cellEdit.onStart,
          EditingCell = cellEdit.EditingCell,
          editingRowIdx = cellEdit.ridx,
          editingColIdx = cellEdit.cidx,
          CLICK_TO_CELL_EDIT = cellEdit.CLICK_TO_CELL_EDIT,
          DBCLICK_TO_CELL_EDIT = cellEdit.DBCLICK_TO_CELL_EDIT,
          rest = _objectWithoutProperties(cellEdit, ['mode', 'onStart', 'EditingCell', 'ridx', 'cidx', 'CLICK_TO_CELL_EDIT', 'DBCLICK_TO_CELL_EDIT']);

      var key = _utils2.default.get(row, keyField);
      var clickToSelect = selectRow.clickToSelect,
          hideSelectColumn = selectRow.hideSelectColumn;


      var trAttrs = _extends({}, attrs);
      if (clickToSelect) {
        trAttrs.onClick = this.handleRowClick;
      } else if (attrs.onClick) {
        trAttrs.onClick = this.handleSimpleRowClick;
      }

      return _react2.default.createElement(
        'tr',
        _extends({ style: style, className: className }, trAttrs),
        selectRow.mode !== _const2.default.ROW_SELECT_DISABLED && !hideSelectColumn ? _react2.default.createElement(_selectionCell2.default, _extends({}, selectRow, {
          rowKey: key,
          rowIndex: rowIndex,
          selected: selected,
          disabled: !selectable
        })) : null,
        columns.map(function (column, index) {
          var dataField = column.dataField;

          var content = _utils2.default.get(row, dataField);
          var editable = _utils2.default.isDefined(column.editable) ? column.editable : true;
          if (dataField === keyField || !editableRow) editable = false;
          if (_utils2.default.isFunction(column.editable)) {
            editable = column.editable(content, row, rowIndex, index);
          }
          if (rowIndex === editingRowIdx && index === editingColIdx) {
            var editCellstyle = column.editCellStyle || {};
            var editCellclasses = column.editCellClasses;
            if (_utils2.default.isFunction(column.editCellStyle)) {
              editCellstyle = column.editCellStyle(content, row, rowIndex, index);
            }
            if (_utils2.default.isFunction(column.editCellClasses)) {
              editCellclasses = column.editCellClasses(content, row, rowIndex, index);
            }
            return _react2.default.createElement(EditingCell, _extends({
              key: content + '-' + index,
              row: row,
              column: column,
              className: editCellclasses,
              style: editCellstyle
            }, rest));
          }
          return _react2.default.createElement(_cell2.default, {
            key: content + '-' + index,
            row: row,
            rowIndex: rowIndex,
            columnIndex: index,
            column: column,
            onStart: onStart,
            editable: editable,
            clickToEdit: mode === CLICK_TO_CELL_EDIT,
            dbclickToEdit: mode === DBCLICK_TO_CELL_EDIT
          });
        })
      );
    }
  }]);

  return Row;
}(_react.Component);

Row.propTypes = {
  row: _propTypes2.default.object.isRequired,
  rowIndex: _propTypes2.default.number.isRequired,
  columns: _propTypes2.default.array.isRequired,
  style: _propTypes2.default.object,
  className: _propTypes2.default.string,
  attrs: _propTypes2.default.object
};

Row.defaultProps = {
  editable: true,
  style: {},
  className: null,
  attrs: {}
};

exports.default = Row;